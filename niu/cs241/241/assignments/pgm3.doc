Assignment #3
worth: 100 points
due date: Oct. 4, 2000 by 10:00 P.M.

This program will be a date converter.  It will allow the user to select from 
the following actions: 
1. Julian date to a Gregorian date 
2. Gregorian to Julian

Gregorian dates are in the format of "MM/DD/YY". (assume YY = 00) 
Julian dates are in the format of "DDD"(include this leap year)

Your program only has to be concerned with the year 2000. 
No file commands are necessary in your program. Any file interfaces needed
will be handled by redirection.

After the date has been converted, then print out the result.

Your input should have the following format:
  action   date to be converted
ex.  1           270
     2        09/05/00

Your output should have the following format:
date to be converted --> converted date
ex.    270   --> 09/26/00  (for action = 1)
    09/05/00 -->   252     (for action = 2)

Your program must be able to check for a hostile date or an illegal field
and generate the appropriate error message.  Your grade for this assignment 
will be partially determined by the extensiveness of your error checking.

ex. 13/13/00 or 5/32/00 or -4/3/00 for Gregorian
     2y6     or  -67    or   404   for Julian

While scanning for errors, your program will stop when the first error is
encountered. The criteria for realizing proper input data is:
1. for action = 1
   only numbers between 1 - 366 is allowed.
2. for action = 2
   only a two digit month field (1-12) 
        a two digit day field (1-31;dependent on the appropriate month)
        a two digit year field (default to 00)
        are allowed
   any of these delimiters (i.e.,"/","$","%","&","@") are allowed
 
It will be your responsibility to determine the different possible errors.
If the criteria stated above does not cover all possibilities, then decide
a course of action and document your response. Part of this assignment will
be your evaluation of legal and illegal input data. Upon realizing illegal
data, the generation of a detailed and appropriate message is expected 
(hint: the more comprehensive the set of error messages, the higher the
score). 

During the grading of your program, an input file with various types of
errors will be accessed.

If you realize an error in the input, generate the following message, all 
on one line:
echo the bad input date 
 then insert one tab 
 then three blank characters
 then "ERROR:"
 and the appropriate error message for that input

When you are ready to submit your program, use the following path:
~janorob/cs241/subpgm/pgm3/reci where i= recitation session
be sure to use the correct naming conventions:
   z#.pgm3.c   (source c prgm)
   z#.pgm3.out (output)
